# Generated by Django 5.2.4 on 2025-07-14 13:06

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0002_alter_inventory_last_updated'),
    ]

    operations = [
        migrations.CreateModel(
            name='AgentExplanation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('explanation_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('query', models.TextField(help_text='Original user question')),
                ('context_data', models.JSONField(default=dict, help_text='Relevant data for explanation')),
                ('explanation_text', models.TextField()),
                ('confidence_level', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High')], default='medium', max_length=20)),
                ('data_sources', models.JSONField(default=list, help_text='Which agents/data were consulted')),
                ('language_model', models.CharField(default='GPT-4', max_length=100)),
                ('tokens_used', models.IntegerField(blank=True, null=True)),
                ('response_time_ms', models.IntegerField(blank=True, null=True)),
                ('user_feedback', models.CharField(blank=True, choices=[('helpful', 'Helpful'), ('not_helpful', 'Not Helpful'), ('unclear', 'Unclear')], max_length=20, null=True)),
                ('created_by_agent', models.CharField(default='ExplainerAgent', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='CortexCoordination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('coordination_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('event_type', models.CharField(choices=[('rebalance_triggered', 'Rebalance Triggered'), ('route_updated', 'Route Updated'), ('disruption_handled', 'Disruption Handled'), ('inspection_alert', 'Inspection Alert'), ('conflict_resolved', 'Conflict Resolved'), ('system_health_check', 'System Health Check')], max_length=50)),
                ('involved_agents', models.JSONField(default=list, help_text='List of agents involved')),
                ('coordination_data', models.JSONField(default=dict, help_text='Coordination context')),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('status', models.CharField(choices=[('initiated', 'Initiated'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed')], default='initiated', max_length=20)),
                ('execution_timeline', models.JSONField(default=list, help_text='Step-by-step execution log')),
                ('created_by_agent', models.CharField(default='CortexManager', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_id', models.CharField(max_length=100, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('category', models.CharField(max_length=100)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('unit_weight', models.FloatField(help_text='Weight in kg')),
                ('shelf_life_days', models.IntegerField(blank=True, null=True)),
                ('minimum_stock_level', models.IntegerField(default=10)),
                ('maximum_stock_level', models.IntegerField(default=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='RouteOptimization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('route_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('waypoints', models.JSONField(blank=True, default=list, help_text='Intermediate stops')),
                ('total_distance_km', models.FloatField()),
                ('estimated_duration_hours', models.FloatField()),
                ('estimated_cost', models.DecimalField(decimal_places=2, max_digits=10)),
                ('traffic_conditions', models.CharField(default='normal', max_length=50)),
                ('route_status', models.CharField(choices=[('planned', 'Planned'), ('active', 'Active'), ('delayed', 'Delayed'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='planned', max_length=20)),
                ('alternative_routes', models.JSONField(blank=True, default=list)),
                ('created_by_agent', models.CharField(default='RoutePlannerAgent', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('store_id', models.CharField(max_length=100, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('location', models.CharField(max_length=255)),
                ('store_type', models.CharField(choices=[('store', 'Retail Store'), ('warehouse', 'Warehouse'), ('fulfillment_center', 'Fulfillment Center'), ('distribution_center', 'Distribution Center')], max_length=50)),
                ('latitude', models.FloatField(blank=True, null=True)),
                ('longitude', models.FloatField(blank=True, null=True)),
                ('capacity', models.IntegerField(default=1000)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='AgentMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('agent_name', models.CharField(max_length=100)),
                ('metric_type', models.CharField(choices=[('response_time', 'Response Time'), ('accuracy', 'Accuracy'), ('throughput', 'Throughput'), ('error_rate', 'Error Rate'), ('success_rate', 'Success Rate'), ('resource_usage', 'Resource Usage')], max_length=50)),
                ('metric_value', models.FloatField()),
                ('unit', models.CharField(help_text='ms, %, count, etc.', max_length=20)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('additional_data', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'indexes': [models.Index(fields=['agent_name', 'metric_type', 'timestamp'], name='core_agentm_agent_n_067f29_idx')],
            },
        ),
        migrations.CreateModel(
            name='ExternalDisruption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disruption_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('event_type', models.CharField(choices=[('weather', 'Weather'), ('traffic', 'Traffic'), ('strike', 'Strike'), ('accident', 'Accident'), ('festival', 'Festival'), ('sports_event', 'Sports Event'), ('infrastructure', 'Infrastructure'), ('other', 'Other')], max_length=50)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('affected_areas', models.JSONField(default=list, help_text='List of affected locations/routes')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('impact_radius_km', models.FloatField(default=5.0)),
                ('data_source', models.CharField(help_text='API, news, manual, etc.', max_length=100)),
                ('created_by_agent', models.CharField(default='DelayMonitorAgent', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('affected_routes', models.ManyToManyField(blank=True, to='core.routeoptimization')),
            ],
        ),
        migrations.CreateModel(
            name='StockRebalanceAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('quantity', models.IntegerField()),
                ('urgency', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20)),
                ('reason', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('in_progress', 'In Progress'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('estimated_cost', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('created_by_agent', models.CharField(default='RebalancerAgent', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product')),
                ('source_store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outbound_rebalances', to='core.store')),
                ('target_store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inbound_rebalances', to='core.store')),
            ],
        ),
        migrations.AddField(
            model_name='routeoptimization',
            name='rebalance_action',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.stockrebalanceaction'),
        ),
        migrations.AddField(
            model_name='routeoptimization',
            name='end_location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='route_ends', to='core.store'),
        ),
        migrations.AddField(
            model_name='routeoptimization',
            name='start_location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='route_starts', to='core.store'),
        ),
        migrations.CreateModel(
            name='VisionInspection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('inspection_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('image_path', models.CharField(help_text='Path to analyzed image', max_length=500)),
                ('inspection_type', models.CharField(choices=[('shelf_stock', 'Shelf Stock Check'), ('spoilage', 'Spoilage Detection'), ('placement', 'Product Placement'), ('cleanliness', 'Cleanliness Check'), ('security', 'Security Check')], max_length=50)),
                ('detected_objects', models.JSONField(default=list, help_text='YOLO detection results')),
                ('anomalies_found', models.JSONField(default=list, help_text='Issues detected')),
                ('confidence_scores', models.JSONField(default=dict, help_text='Detection confidence levels')),
                ('action_required', models.BooleanField(default=False)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=20)),
                ('processed_by_model', models.CharField(default='YOLOv8', max_length=100)),
                ('created_by_agent', models.CharField(default='VisionInspectorAgent', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.store')),
            ],
        ),
        migrations.CreateModel(
            name='DemandForecast',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('forecast_id', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('forecast_date', models.DateField()),
                ('predicted_demand', models.IntegerField()),
                ('confidence_score', models.FloatField(help_text='0-1 confidence level')),
                ('forecast_horizon_days', models.IntegerField(default=7)),
                ('model_version', models.CharField(default='LNN_v1', max_length=50)),
                ('external_factors', models.JSONField(blank=True, default=dict, help_text='Weather, events, etc.')),
                ('created_by_agent', models.CharField(default='InventoryAgent', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.product')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.store')),
            ],
            options={
                'unique_together': {('store', 'product', 'forecast_date')},
            },
        ),
    ]
